# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  config.vagrant.plugins = ["vagrant-reload", "vagrant-vbguest", "vagrant-disksize"]
  config.vbguest.installer_options = {allow_kernel_upgrade: true}
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "centos/7"
  config.disksize.size = "80GB"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  bitrix_uid = 600
  bitrix_gid = 600
  config.vm.synced_folder "../www", "/home/bitrix/www.sync", type: "virtualbox", group: bitrix_gid, owner: bitrix_uid

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
    vb.memory = "1024"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    echo 'LC_ALL="en_US.UTF-8"' >> /etc/environment
  SHELL
  config.vm.provision :reload
  config.vm.provision "shell", inline: <<-SHELL
    yum install cloud-utils-growpart -y
    growpart /dev/sda 1
    xfs_growfs -d /dev/sda1
  SHELL
  config.vm.provision :reload
  config.vm.provision "shell", inline: <<-SHELL
    sed -i 's/SELINUX=\\(enforcing\\|permissive\\)/SELINUX=disabled/g' /etc/{selinux/config,sysconfig/selinux}
  SHELL
  config.vm.provision :reload
  config.vm.provision "shell", inline: <<-SHELL
    chown 600:600 /home/bitrix
    yum install wget epel-release -y
    wget http://repos.1c-bitrix.ru/yum/bitrix-env.sh
    chmod +x bitrix-env.sh
    ./bitrix-env.sh
    sed -i 's!~/menu.sh!#\\0!' /root/.bash_profile
    echo '
[xdebug]
zend_extension="/usr/lib64/php/modules/xdebug.so"
xdebug.remote_enable=1
xdebug.remote_host=10.0.2.2
xdebug.remote_port=9000' >> /etc/php.ini
    service httpd reload
    mkdir /root/.bin
    echo "#!/bin/bash
if (( \\`du -s /home/bitrix/www | cut -d$'\\t' -f1\\` > 10000 )) && [ -d /home/bitrix/www ] && [ ! -L /home/bitrix/www ] && [ -d /home/bitrix/www.sync ] && [ ! -d /home/bitrix/www.bac ]; then
cd /home/bitrix
rsync -a --info=progress2 www/ www.sync/
mv www{,.bac}
sudo -u bitrix ln -s www.sync www
fi" > /root/.bin/run_after_site_install.sh
    chmod +x /root/.bin/run_after_site_install.sh
  SHELL
  config.trigger.after :up, :reload do |tr|
    tr.run_remote = {inline: "if [ -f /root/.bin/run_after_site_install.sh ]; then /root/.bin/run_after_site_install.sh; fi && hostname -I | cut -d' ' -f2"}
  end
end
